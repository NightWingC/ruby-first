puts 5 + 5
puts 10 - 5
puts 5 * 5
# Potencia
puts  5 ** 2
puts 10 / 2
puts 65 % 5

numero = 9 

# operador de asignacion 
puts numero += 9
puts numero *= 5
puts numero /= 5
puts numero %= 5

#  clase
puts 5.class

# Todo son objetos, todo tiene metodos 
# No hay variables primitivas 

# tipo de dato infinito
puts 54.0 / 0


=begin
  Usos especiales de los n칰meros
Usos especiales de los n칰meros
Aparte de lo obvio en cuanto a n칰meros, ruby tiene algunas peculariedades que pueden ser 칰tiles con el fin de ganar expresividad.

Por ejemplo, podemos expresar miles utilizando el s칤mbolo _ de la siguiente manera:

1_123

Esto ser칤a el equivalente de escribir 1,123 (o 1.123 en Espa침a y quiz치 otros pa칤ses que ni conozco 游뱎).

El n칰mero funcionar치 igual que cualquier otro n칰mero (En este caso, igual que 1123). El 칰nico prop칩sito de esta sintaxis es que sea m치s legible a simple vista, lo cu치l es m치s relevante con un n칰mero como 123456789123456789 (ciertamente es m치s legible leer 123_456_789_123_456_789). Por supuesto, esta opci칩n sigue siendo opcional.



Tambi칠n es posible utilizar n칰meros a manera de notaci칩n cient칤fica:



1.2e-3 #Esto ser칤a un tipo Float equivalente al n칰mero 0.0012


Hay mucho m치s que decir de los n칰meros en Ruby pero es imposible tratarlo todo en un curso como este.



Para m치s informaci칩n, mira este link:

https://www.rubyguides.com/2016/07/numbers-in-ruby/
=end




